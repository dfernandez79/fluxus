#!/usr/bin/env node

var fs = require('fs-extra');
var chalk = require('chalk');
var path = require('path');
var fluxus = require('../lib');
var configPath = path.resolve(process.argv[2] || 'config.json');
var config = loadConfig(configPath);

var eventHandlers = {
  watch: function (evt) {
    console.log(
      chalk.cyan('Watching: ') +
      chalk.bold(evt.action.fileToWatch()) +
      chalk.dim(' (' + evt.action.friendlyName() + ')')
    );
  },
  change: function (evt) {
    console.log(chalk.green('Change detected: ') + chalk.bold(evt.action.fileToWatch()));
  },
  start: function (evt) {
    console.log(chalk.yellow('Start: ') + chalk.bold(evt.action));
  },
  end: function (evt) {
    console.log(chalk.yellow('End: ') + chalk.bold(evt.action));
  },
  error: function (evt) {
    console.log( chalk.bold.red('ERROR ') + chalk.bold(evt.action));
    console.log(chalk.dim('Cause: \n' + evt.cause));
  },
  progress: function (evt) {
    console.log(chalk.dim('  ' + evt.status));
  }
};

var fluxusRun = fluxus(config, eventHandlers);
fs.watch(configPath, function () {
  console.log(chalk.green('Change detected: ') + chalk.bold('Configuration file'));
  fluxusRun.stop();
  config = loadConfig(configPath);
  fluxusRun = fluxus(config, eventHandlers);
});

function loadConfig(configPath) {
  console.log(chalk.dim('Loading configuration ' + path.resolve(configPath)));
  try {
    return fs.readJsonSync(configPath);
  } catch (e) {
    console.log(chalk.red('The configuration is not a valid JSON file'));
    console.log(chalk.dim(e));
    return [];
  }
}
